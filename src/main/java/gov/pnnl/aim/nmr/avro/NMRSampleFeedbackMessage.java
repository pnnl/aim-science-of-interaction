/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.pnnl.aim.nmr.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class NMRSampleFeedbackMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NMRSampleFeedbackMessage\",\"namespace\":\"gov.pnnl.aim.nmr.avro\",\"fields\":[{\"name\":\"sampleID\",\"type\":\"string\"},{\"name\":\"compoundName\",\"type\":\"string\"},{\"name\":\"presence\",\"type\":\"boolean\"},{\"name\":\"spectrum\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence sampleID;
  @Deprecated public java.lang.CharSequence compoundName;
  @Deprecated public boolean presence;
  @Deprecated public java.util.List<java.lang.Double> spectrum;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public NMRSampleFeedbackMessage() {}

  /**
   * All-args constructor.
   */
  public NMRSampleFeedbackMessage(java.lang.CharSequence sampleID, java.lang.CharSequence compoundName, java.lang.Boolean presence, java.util.List<java.lang.Double> spectrum) {
    this.sampleID = sampleID;
    this.compoundName = compoundName;
    this.presence = presence;
    this.spectrum = spectrum;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sampleID;
    case 1: return compoundName;
    case 2: return presence;
    case 3: return spectrum;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sampleID = (java.lang.CharSequence)value$; break;
    case 1: compoundName = (java.lang.CharSequence)value$; break;
    case 2: presence = (java.lang.Boolean)value$; break;
    case 3: spectrum = (java.util.List<java.lang.Double>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sampleID' field.
   */
  public java.lang.CharSequence getSampleID() {
    return sampleID;
  }

  /**
   * Sets the value of the 'sampleID' field.
   * @param value the value to set.
   */
  public void setSampleID(java.lang.CharSequence value) {
    this.sampleID = value;
  }

  /**
   * Gets the value of the 'compoundName' field.
   */
  public java.lang.CharSequence getCompoundName() {
    return compoundName;
  }

  /**
   * Sets the value of the 'compoundName' field.
   * @param value the value to set.
   */
  public void setCompoundName(java.lang.CharSequence value) {
    this.compoundName = value;
  }

  /**
   * Gets the value of the 'presence' field.
   */
  public java.lang.Boolean getPresence() {
    return presence;
  }

  /**
   * Sets the value of the 'presence' field.
   * @param value the value to set.
   */
  public void setPresence(java.lang.Boolean value) {
    this.presence = value;
  }

  /**
   * Gets the value of the 'spectrum' field.
   */
  public java.util.List<java.lang.Double> getSpectrum() {
    return spectrum;
  }

  /**
   * Sets the value of the 'spectrum' field.
   * @param value the value to set.
   */
  public void setSpectrum(java.util.List<java.lang.Double> value) {
    this.spectrum = value;
  }

  /** Creates a new NMRSampleFeedbackMessage RecordBuilder */
  public static gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder newBuilder() {
    return new gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder();
  }
  
  /** Creates a new NMRSampleFeedbackMessage RecordBuilder by copying an existing Builder */
  public static gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder newBuilder(gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder other) {
    return new gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder(other);
  }
  
  /** Creates a new NMRSampleFeedbackMessage RecordBuilder by copying an existing NMRSampleFeedbackMessage instance */
  public static gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder newBuilder(gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage other) {
    return new gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder(other);
  }
  
  /**
   * RecordBuilder for NMRSampleFeedbackMessage instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NMRSampleFeedbackMessage>
    implements org.apache.avro.data.RecordBuilder<NMRSampleFeedbackMessage> {

    private java.lang.CharSequence sampleID;
    private java.lang.CharSequence compoundName;
    private boolean presence;
    private java.util.List<java.lang.Double> spectrum;

    /** Creates a new Builder */
    private Builder() {
      super(gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sampleID)) {
        this.sampleID = data().deepCopy(fields()[0].schema(), other.sampleID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.compoundName)) {
        this.compoundName = data().deepCopy(fields()[1].schema(), other.compoundName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.presence)) {
        this.presence = data().deepCopy(fields()[2].schema(), other.presence);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.spectrum)) {
        this.spectrum = data().deepCopy(fields()[3].schema(), other.spectrum);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing NMRSampleFeedbackMessage instance */
    private Builder(gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage other) {
            super(gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.SCHEMA$);
      if (isValidValue(fields()[0], other.sampleID)) {
        this.sampleID = data().deepCopy(fields()[0].schema(), other.sampleID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.compoundName)) {
        this.compoundName = data().deepCopy(fields()[1].schema(), other.compoundName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.presence)) {
        this.presence = data().deepCopy(fields()[2].schema(), other.presence);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.spectrum)) {
        this.spectrum = data().deepCopy(fields()[3].schema(), other.spectrum);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'sampleID' field */
    public java.lang.CharSequence getSampleID() {
      return sampleID;
    }
    
    /** Sets the value of the 'sampleID' field */
    public gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder setSampleID(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.sampleID = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'sampleID' field has been set */
    public boolean hasSampleID() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'sampleID' field */
    public gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder clearSampleID() {
      sampleID = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'compoundName' field */
    public java.lang.CharSequence getCompoundName() {
      return compoundName;
    }
    
    /** Sets the value of the 'compoundName' field */
    public gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder setCompoundName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.compoundName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'compoundName' field has been set */
    public boolean hasCompoundName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'compoundName' field */
    public gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder clearCompoundName() {
      compoundName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'presence' field */
    public java.lang.Boolean getPresence() {
      return presence;
    }
    
    /** Sets the value of the 'presence' field */
    public gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder setPresence(boolean value) {
      validate(fields()[2], value);
      this.presence = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'presence' field has been set */
    public boolean hasPresence() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'presence' field */
    public gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder clearPresence() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'spectrum' field */
    public java.util.List<java.lang.Double> getSpectrum() {
      return spectrum;
    }
    
    /** Sets the value of the 'spectrum' field */
    public gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder setSpectrum(java.util.List<java.lang.Double> value) {
      validate(fields()[3], value);
      this.spectrum = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'spectrum' field has been set */
    public boolean hasSpectrum() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'spectrum' field */
    public gov.pnnl.aim.nmr.avro.NMRSampleFeedbackMessage.Builder clearSpectrum() {
      spectrum = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public NMRSampleFeedbackMessage build() {
      try {
        NMRSampleFeedbackMessage record = new NMRSampleFeedbackMessage();
        record.sampleID = fieldSetFlags()[0] ? this.sampleID : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.compoundName = fieldSetFlags()[1] ? this.compoundName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.presence = fieldSetFlags()[2] ? this.presence : (java.lang.Boolean) defaultValue(fields()[2]);
        record.spectrum = fieldSetFlags()[3] ? this.spectrum : (java.util.List<java.lang.Double>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}

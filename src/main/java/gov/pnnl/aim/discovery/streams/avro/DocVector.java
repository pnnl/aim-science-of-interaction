/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package gov.pnnl.aim.discovery.streams.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DocVector extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DocVector\",\"namespace\":\"gov.pnnl.aim.discovery.streams.avro\",\"fields\":[{\"name\":\"docid\",\"type\":\"string\"},{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"vector\",\"type\":{\"type\":\"array\",\"items\":\"double\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence docid;
  @Deprecated public java.lang.CharSequence label;
  @Deprecated public java.util.List<java.lang.Double> vector;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DocVector() {}

  /**
   * All-args constructor.
   */
  public DocVector(java.lang.CharSequence docid, java.lang.CharSequence label, java.util.List<java.lang.Double> vector) {
    this.docid = docid;
    this.label = label;
    this.vector = vector;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return docid;
    case 1: return label;
    case 2: return vector;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: docid = (java.lang.CharSequence)value$; break;
    case 1: label = (java.lang.CharSequence)value$; break;
    case 2: vector = (java.util.List<java.lang.Double>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'docid' field.
   */
  public java.lang.CharSequence getDocid() {
    return docid;
  }

  /**
   * Sets the value of the 'docid' field.
   * @param value the value to set.
   */
  public void setDocid(java.lang.CharSequence value) {
    this.docid = value;
  }

  /**
   * Gets the value of the 'label' field.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'vector' field.
   */
  public java.util.List<java.lang.Double> getVector() {
    return vector;
  }

  /**
   * Sets the value of the 'vector' field.
   * @param value the value to set.
   */
  public void setVector(java.util.List<java.lang.Double> value) {
    this.vector = value;
  }

  /** Creates a new DocVector RecordBuilder */
  public static gov.pnnl.aim.discovery.streams.avro.DocVector.Builder newBuilder() {
    return new gov.pnnl.aim.discovery.streams.avro.DocVector.Builder();
  }
  
  /** Creates a new DocVector RecordBuilder by copying an existing Builder */
  public static gov.pnnl.aim.discovery.streams.avro.DocVector.Builder newBuilder(gov.pnnl.aim.discovery.streams.avro.DocVector.Builder other) {
    return new gov.pnnl.aim.discovery.streams.avro.DocVector.Builder(other);
  }
  
  /** Creates a new DocVector RecordBuilder by copying an existing DocVector instance */
  public static gov.pnnl.aim.discovery.streams.avro.DocVector.Builder newBuilder(gov.pnnl.aim.discovery.streams.avro.DocVector other) {
    return new gov.pnnl.aim.discovery.streams.avro.DocVector.Builder(other);
  }
  
  /**
   * RecordBuilder for DocVector instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DocVector>
    implements org.apache.avro.data.RecordBuilder<DocVector> {

    private java.lang.CharSequence docid;
    private java.lang.CharSequence label;
    private java.util.List<java.lang.Double> vector;

    /** Creates a new Builder */
    private Builder() {
      super(gov.pnnl.aim.discovery.streams.avro.DocVector.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(gov.pnnl.aim.discovery.streams.avro.DocVector.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.docid)) {
        this.docid = data().deepCopy(fields()[0].schema(), other.docid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.label)) {
        this.label = data().deepCopy(fields()[1].schema(), other.label);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vector)) {
        this.vector = data().deepCopy(fields()[2].schema(), other.vector);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DocVector instance */
    private Builder(gov.pnnl.aim.discovery.streams.avro.DocVector other) {
            super(gov.pnnl.aim.discovery.streams.avro.DocVector.SCHEMA$);
      if (isValidValue(fields()[0], other.docid)) {
        this.docid = data().deepCopy(fields()[0].schema(), other.docid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.label)) {
        this.label = data().deepCopy(fields()[1].schema(), other.label);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.vector)) {
        this.vector = data().deepCopy(fields()[2].schema(), other.vector);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'docid' field */
    public java.lang.CharSequence getDocid() {
      return docid;
    }
    
    /** Sets the value of the 'docid' field */
    public gov.pnnl.aim.discovery.streams.avro.DocVector.Builder setDocid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.docid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'docid' field has been set */
    public boolean hasDocid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'docid' field */
    public gov.pnnl.aim.discovery.streams.avro.DocVector.Builder clearDocid() {
      docid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'label' field */
    public java.lang.CharSequence getLabel() {
      return label;
    }
    
    /** Sets the value of the 'label' field */
    public gov.pnnl.aim.discovery.streams.avro.DocVector.Builder setLabel(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.label = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'label' field has been set */
    public boolean hasLabel() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'label' field */
    public gov.pnnl.aim.discovery.streams.avro.DocVector.Builder clearLabel() {
      label = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'vector' field */
    public java.util.List<java.lang.Double> getVector() {
      return vector;
    }
    
    /** Sets the value of the 'vector' field */
    public gov.pnnl.aim.discovery.streams.avro.DocVector.Builder setVector(java.util.List<java.lang.Double> value) {
      validate(fields()[2], value);
      this.vector = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'vector' field has been set */
    public boolean hasVector() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'vector' field */
    public gov.pnnl.aim.discovery.streams.avro.DocVector.Builder clearVector() {
      vector = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public DocVector build() {
      try {
        DocVector record = new DocVector();
        record.docid = fieldSetFlags()[0] ? this.docid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.label = fieldSetFlags()[1] ? this.label : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.vector = fieldSetFlags()[2] ? this.vector : (java.util.List<java.lang.Double>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
